import com.android.tools.profgen.ArtProfileKt
import com.android.tools.profgen.ArtProfileSerializer
import com.android.tools.profgen.DexFile

plugins {
    id 'com.android.application'
    id "kotlin-android"
    id "kotlin-kapt"
    id "kotlin-parcelize"
    id "org.sonarqube" version "4.0.0.2929"
}

// Version management
ext {
    
    kotlinVersion = "1.9.25"
    
    // AndroidX versions
    androidxCoreVersion = "1.12.0"
    androidxFragmentVersion = "1.6.2"
    androidxLifecycleVersion = "2.6.2"
    androidxWorkVersion = "2.8.1"
    androidxRecyclerViewVersion = "1.3.2"
    androidxWebKitVersion = "1.9.0"
    
    // Third-party library versions
    okhttpVersion = "4.12.0"
    exoplayerVersion = "2.18.7"
    picassoVersion = "2.8"
    rxJavaVersion = "3.1.8"
    rxAndroidVersion = "3.0.2"
    jsoupVersion = "1.17.2"
    groupieVersion = "2.10.1"
    markwonVersion = "4.6.2"
    acraVersion = "5.11.3"
    leakCanaryVersion = "2.12"
    
    // Testing versions
    junitVersion = "4.13.2"
    mockitoVersion = "5.6.0"
    androidxTestVersion = "1.1.5"
    assertjVersion = "3.24.2"
}

android {
    compileSdk 34
    namespace "com.nidoham.flowtube"
    
    defaultConfig {
        applicationId "com.nidoham.flowtube"
        resValue "string", "app_name", "FlowTube"
        minSdk 26
        targetSdk 34
        
        versionCode 3
        versionName "1.0.01-cheeta"
        
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Enable vector drawable support for older API levels
        vectorDrawables.useSupportLibrary = true
    }
    
    androidResources {
        generateLocaleConfig = true
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix getDebugApplicationIdSuffix()
            resValue "string", "app_name", getDebugAppName()
            archivesBaseName = getDebugArchivesBaseName()
        }

        release {
            if (System.properties.containsKey('packageSuffix')) {
                applicationIdSuffix System.getProperty('packageSuffix')
                resValue "string", "app_name", "NewPipe " + System.getProperty('packageSuffix')
                archivesBaseName = 'NewPipe_' + System.getProperty('packageSuffix')
            } else {
                archivesBaseName = 'FlowTube-release'
            }
            minifyEnabled true
            shrinkResources false // Disabled to maintain F-Droid reproducible builds
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    lint {
        checkReleaseBuilds false
        abortOnError false
        disable 'NonConstantResourceId'
        // Additional lint configurations for better code quality
        warningsAsErrors true
        checkDependencies true
    }
    
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        encoding 'utf-8'
    }
    
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
        freeCompilerArgs += [
            "-opt-in=kotlin.RequiresOptIn",
            "-Xjvm-default=all"
        ]
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas")
    }

    androidResources {
        generateLocaleConfig = true
    }
    
    buildFeatures {
        viewBinding true
        buildConfig true
    }
    
    packagingOptions {
        resources {
            excludes += [
                'META-INF/README.md',
                'META-INF/CHANGES',
                'META-INF/COPYRIGHT',
                'META-INF/LICENSE',
                'META-INF/NOTICE',
                'META-INF/DEPENDENCIES'
            ]
        }
    }
    
    // Improved Ktlint configuration
    configurations {
        ktlint
    }
    
    dependencies {
        ktlint "com.pinterest:ktlint:0.50.0"
    }
}

dependencies {
    // Leanback support library (for TV UI components)
    implementation "androidx.leanback:leanback:1.1.0-rc02"
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation 'com.google.android.exoplayer:exoplayer:2.19.1'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    // Gson library
    implementation 'com.google.code.gson:gson:2.10.1'

    // Desugaring
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs_nio:2.0.4'

    // NewPipe libraries
    implementation 'com.github.TeamNewPipe:nanojson:e9d656ddb49a412a5a0a5d5ef20ca7ef09549996'
    implementation 'com.github.TeamNewPipe:NewPipeExtractor:v0.24.8'
    implementation 'com.github.TeamNewPipe:NoNonsense-FilePicker:5.0.0'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    // AndroidX dependencies
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "androidx.core:core-ktx:$androidxCoreVersion"
    implementation 'androidx.documentfile:documentfile:1.0.1'
    implementation "androidx.fragment:fragment-ktx:$androidxFragmentVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$androidxLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$androidxLifecycleVersion"
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'
    implementation 'androidx.media:media:1.7.0'
    implementation 'androidx.preference:preference:1.2.1'
    implementation "androidx.recyclerview:recyclerview:$androidxRecyclerViewVersion"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.viewpager2:viewpager2:1.1.0-beta02'
    implementation "androidx.work:work-runtime-ktx:$androidxWorkVersion"
    implementation "androidx.work:work-rxjava3:$androidxWorkVersion"
    implementation "androidx.webkit:webkit:$androidxWebKitVersion"
    implementation "com.google.android.material:material:1.9.0"

    // State management
    implementation 'com.github.livefront:bridge:v2.0.2'
    implementation 'com.evernote:android-state:1.4.1'
    kapt 'com.evernote:android-state-processor:1.4.1'

    // Networking and parsing
    implementation "org.jsoup:jsoup:$jsoupVersion"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"

    // Media player (ExoPlayer)
    implementation "com.google.android.exoplayer:exoplayer-core:$exoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-dash:$exoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-database:$exoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-datasource:$exoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-hls:$exoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-smoothstreaming:$exoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-ui:$exoplayerVersion"
    implementation "com.google.android.exoplayer:extension-mediasession:$exoplayerVersion"

    // Code generation
    compileOnly 'com.google.auto.service:auto-service-annotations:1.1.1'
    kapt 'com.google.auto.service:auto-service:1.1.1'

    // UI components
    implementation "com.github.lisawray.groupie:groupie:$groupieVersion"
    implementation "com.github.lisawray.groupie:groupie-viewbinding:$groupieVersion"
    implementation "com.squareup.picasso:picasso:$picassoVersion"

    // Markdown rendering
    implementation "io.noties.markwon:core:$markwonVersion"
    implementation "io.noties.markwon:linkify:$markwonVersion"

    // Error reporting and utilities
    implementation "ch.acra:acra-core:$acraVersion"
    implementation 'com.jakewharton:process-phoenix:2.1.2'

    // Reactive programming
    implementation "io.reactivex.rxjava3:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava3:rxandroid:$rxAndroidVersion"
    implementation 'com.jakewharton.rxbinding4:rxbinding:4.0.0'

    // Utilities
    implementation 'org.ocpsoft.prettytime:prettytime:5.0.8.Final'

    // Debug dependencies
    debugImplementation "com.squareup.leakcanary:leakcanary-object-watcher-android:$leakCanaryVersion"
    debugImplementation "com.squareup.leakcanary:plumber-android:$leakCanaryVersion"
    debugImplementation "com.squareup.leakcanary:leakcanary-android-core:$leakCanaryVersion"
    debugImplementation 'com.facebook.stetho:stetho:1.6.0'
    debugImplementation 'com.facebook.stetho:stetho-okhttp3:1.6.0'

    // Testing dependencies
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxTestVersion"
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation "org.assertj:assertj-core:$assertjVersion"
    
    // Custom libraries
    implementation files('libs/com.nidoham.strivo.jar')
    implementation files('libs/com.nidoham.localization.jar')
}

// Utility functions
def getVersionCode() {
    return System.properties.containsKey('versionCodeOverride') 
        ? System.getProperty('versionCodeOverride') as Integer 
        : appVersionCode
}

def getVersionName() {
    def name = appVersionName
    if (System.properties.containsKey('versionNameSuffix')) {
        name += System.getProperty('versionNameSuffix')
    }
    return name
}

def getDebugApplicationIdSuffix() {
    def workingBranch = getGitWorkingBranch()
    def normalizedWorkingBranch = workingBranch
        .replaceFirst("^[^A-Za-z]+", "")
        .replaceAll("[^0-9A-Za-z]+", "")
    
    if (normalizedWorkingBranch.isEmpty() || workingBranch in ["master", "main", "dev"]) {
        return ".debug"
    } else {
        return ".debug.$normalizedWorkingBranch"
    }
}

def getDebugAppName() {
    def workingBranch = getGitWorkingBranch()
    def normalizedWorkingBranch = workingBranch
        .replaceFirst("^[^A-Za-z]+", "")
        .replaceAll("[^0-9A-Za-z]+", "")
    
    if (normalizedWorkingBranch.isEmpty() || workingBranch in ["master", "main", "dev"]) {
        return "FlowTube Debug"
    } else {
        return "FlowTube $workingBranch"
    }
}

def getDebugArchivesBaseName() {
    def workingBranch = getGitWorkingBranch()
    def normalizedWorkingBranch = workingBranch
        .replaceFirst("^[^A-Za-z]+", "")
        .replaceAll("[^0-9A-Za-z]+", "")
    
    if (normalizedWorkingBranch.isEmpty() || workingBranch in ["master", "main", "dev"]) {
        return 'FlowTube-debug'
    } else {
        return "FlowTube_$normalizedWorkingBranch"
    }
}

static String getGitWorkingBranch() {
    try {
        def gitProcess = "git rev-parse --abbrev-ref HEAD".execute()
        gitProcess.waitFor()
        return gitProcess.exitValue() == 0 ? gitProcess.text.trim() : ""
    } catch (IOException ignored) {
        return ""
    }
}

// Improved Ktlint tasks
def outputDir = "${project.buildDir}/reports/ktlint/"
def inputFiles = project.fileTree(dir: "src", include: "**/*.kt")

tasks.register('runKtlint', JavaExec) {
    group = "verification"
    description = "Check Kotlin code style"
    inputs.files(inputFiles)
    outputs.dir(outputDir)
    mainClass.set("com.pinterest.ktlint.Main")
    classpath = configurations.ktlint
    args "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/reports/ktlint/ktlint-results.xml", "src/**/*.kt"
    jvmArgs("--add-opens", "java.base/java.lang=ALL-UNNAMED")
}

tasks.register('formatKtlint', JavaExec) {
    group = "formatting"
    description = "Fix Kotlin code style deviations"
    inputs.files(inputFiles)
    outputs.dir(outputDir)
    mainClass.set("com.pinterest.ktlint.Main")
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
    jvmArgs("--add-opens", "java.base/java.lang=ALL-UNNAMED")
}

// Enhanced SonarQube configuration
sonar {
    properties {
        property "sonar.projectKey", "TeamNewPipe_NewPipe"
        property "sonar.organization", "teamnewpipe"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.kotlin.ktlint.reportPaths", "${buildDir}/reports/ktlint/ktlint-results.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

// Build dependencies
afterEvaluate {
    if (!System.properties.containsKey('skipFormatKtlint')) {
        preBuild.dependsOn formatKtlint
    }
    preBuild.dependsOn runKtlint
}

// Enhanced reproducible builds with proper serialization
project.afterEvaluate {
    tasks.matching { it.name.startsWith('compileReleaseArtProfile') }.configureEach {
        doLast {
            outputs.files.each { file ->
                if (file.name.endsWith('.profm')) {
                    println("Processing and sorting ART profile: ${file.name}")
                    
                    try {
                        def version = ArtProfileSerializer.valueOf("METADATA_0_0_2")
                        def profile = ArtProfileKt.ArtProfile(file)
                        def keys = new ArrayList<>(profile.profileData.keySet())
                        def sortedData = new LinkedHashMap<>()
                        
                        // Sort keys using DexFile comparator for consistent ordering
                        Collections.sort(keys, new DexFile.Companion())
                        keys.each { key -> 
                            sortedData[key] = profile.profileData[key] 
                        }
                        
                        // Write sorted profile data
                        file.withOutputStream { outputStream ->
                            outputStream.write(version.magicBytes$profgen)
                            outputStream.write(version.versionBytes$profgen)
                            version.write$profgen(outputStream, sortedData, "")
                        }
                        
                        println("Successfully processed ART profile: ${file.name}")
                    } catch (Exception e) {
                        logger.warn("Failed to process ART profile ${file.name}: ${e.message}")
                    }
                }
            }
        }
    }
}